name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        ros-distro: [humble]
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: '${{ matrix.python-version }}'
    
    - name: Install ROS2 ${{ matrix.ros-distro }} manually
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update && sudo apt-get install -y curl gnupg2 lsb-release
        sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y ros-${{ matrix.ros-distro }}-desktop python3-colcon-common-extensions
        echo "source /opt/ros/${{ matrix.ros-distro }}/setup.bash" >> $GITHUB_ENV
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          python3-pip \
          python3-colcon-common-extensions \
          ros-${{ matrix.ros-distro }}-navigation2 \
          ros-${{ matrix.ros-distro }}-slam-toolbox \
          ros-${{ matrix.ros-distro }}-gazebo-ros-pkgs
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
    
    - name: Lint with flake8
      run: |
        flake8 src/first_pkg/first_pkg --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/first_pkg/first_pkg --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check src/first_pkg/first_pkg
    
    - name: Import sort check with isort
      run: |
        isort --check-only src/first_pkg/first_pkg
    
    - name: Type check with mypy
      run: |
        mypy src/first_pkg/first_pkg --ignore-missing-imports
    
    - name: Build workspace
      run: |
        cd ${{ github.workspace }}
        colcon build --packages-select first_pkg
    
    - name: Run tests
      run: |
        cd ${{ github.workspace }}
        colcon test --packages-select first_pkg
        colcon test-result --all --verbose
    
    - name: Run Python tests
      run: |
        cd tests
        python -m pytest test_exploration.py -v --cov=../src/first_pkg/first_pkg --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-22.04
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install ROS2 Humble manually
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update && sudo apt-get install -y curl gnupg2 lsb-release
        sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y ros-humble-desktop python3-colcon-common-extensions
        echo "source /opt/ros/humble/setup.bash" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          python3-pip \
          python3-colcon-common-extensions \
          ros-humble-navigation2 \
          ros-humble-slam-toolbox \
          ros-humble-gazebo-ros-pkgs
        pip install -r requirements.txt
    
    - name: Build package
      run: |
        colcon build --packages-select first_pkg --cmake-args -DCMAKE_BUILD_TYPE=Release
    
    - name: Create release artifacts
      run: |
        mkdir -p release
        cp -r install/ release/
        cp -r src/ release/
        cp requirements.txt release/
        cp README.md release/
        cp LICENSE release/
        tar -czf ros2-smart-exploration.tar.gz -C release .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ros2-smart-exploration-build
        path: ros2-smart-exploration.tar.gz

  security:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-scan'
      continue-on-error: true

  documentation:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install -r docs/requirements.txt
    
    - name: Build documentation
      run: |
        cd docs
        # Use the build script which handles both Sphinx and fallback
        bash build_docs.sh
      continue-on-error: true
    
    - name: Check documentation build
      run: |
        if [ -d "docs/_build/html" ]; then
          echo "Documentation built successfully"
          ls -la docs/_build/html/
        else
          echo "Documentation build failed"
          exit 1
        fi
    
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: documentation-build
        path: ./docs/_build/html
